// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.31.1
// source: toy.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ToyService_Handshake_FullMethodName = "/toy.ToyService/Handshake"
)

// ToyServiceClient is the client API for ToyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToyServiceClient interface {
	Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error)
}

type toyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToyServiceClient(cc grpc.ClientConnInterface) ToyServiceClient {
	return &toyServiceClient{cc}
}

func (c *toyServiceClient) Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error) {
	out := new(HandshakeResponse)
	err := c.cc.Invoke(ctx, ToyService_Handshake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToyServiceServer is the server API for ToyService service.
// All implementations must embed UnimplementedToyServiceServer
// for forward compatibility
type ToyServiceServer interface {
	Handshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error)
	mustEmbedUnimplementedToyServiceServer()
}

// UnimplementedToyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedToyServiceServer struct {
}

func (UnimplementedToyServiceServer) Handshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedToyServiceServer) mustEmbedUnimplementedToyServiceServer() {}

// UnsafeToyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToyServiceServer will
// result in compilation errors.
type UnsafeToyServiceServer interface {
	mustEmbedUnimplementedToyServiceServer()
}

func RegisterToyServiceServer(s grpc.ServiceRegistrar, srv ToyServiceServer) {
	s.RegisterService(&ToyService_ServiceDesc, srv)
}

func _ToyService_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToyServiceServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToyService_Handshake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToyServiceServer).Handshake(ctx, req.(*HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToyService_ServiceDesc is the grpc.ServiceDesc for ToyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "toy.ToyService",
	HandlerType: (*ToyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _ToyService_Handshake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toy.proto",
}
